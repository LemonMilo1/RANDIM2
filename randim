import random
import os
from PIL import Image

MESSAGE="bonjour"
CLE="pop"

imagecode=Image.open(os.path.join('Lenine.png'))

#Liste de caractères de l'alphabet limitée à cause de notre système à 256,
#n'importe quel alphabet peut être inséré et agir comme une impasse 
#supplémentaire, ainsi qu'un adaptation à tous les langages.
ALPHABET="abcdefghijklmnopqrstuvwxyz. ,_"
alphabet=[]

def melanger_alphabet_selon_cle(cle, charlist, alpha):
    alpha = list(charlist)
    random.seed(cle)  # Initialiser la graine pour assurer la reproductibilité
    random.shuffle(alpha)
    return ''.join(alpha)

alphabet = melanger_alphabet_selon_cle(CLE, ALPHABET, alphabet)

# Afficher la liste de caractères de l'alphabet arrangée de manière désordonnée
print("Liste de caractères de l'alphabet désordonnée :", alphabet)

def encoded_color(char, alpha):
    """Prends pour argument un charactère et le renvoie en code RGB selon 
    l'index d'un alphabet alpha"""
    RGBcode=0
    for count in range(len(alpha)) :
        if alpha[count] == char:
            RGBcode=count
    return (RGBcode,RGBcode,RGBcode)

def encode_message(message):
    """Prends pour argument un message et le renvoie
        sous forme d'une liste de codes RGB"""
    codelist=[]
    for i in range(len(message)):
        codelist.append(encoded_color(message[i], alphabet))
    return codelist

def prepare_image(image, messcode, tolerance=1):
    """Prépare l'image à la dissimulation du code en faussant les RGB égaux
        comme [22,22,22] mais conserve les codes RGB correspondant à ceux du
        message"""
    codelist = messcode
    w, h = image.size
    for x in range(w):
        for y in range(h):
            colorcode = image.getpixel((x, y))
            if colorcode[0] == colorcode[1] == colorcode[2]:
                if codelist and colorcode==codelist[0]:
                    codelist.pop(0)
                else:
                    # Transformer en bleu la couleur primaire la moins visible des trois
                    if colorcode[2]<128:
                        image.putpixel((x, y), (colorcode[0],colorcode[1],colorcode[2]+tolerance))
                    else:
                        image.putpixel((x, y), (colorcode[0],colorcode[1],colorcode[2]-tolerance))

    return image

def test_image(image):
    """parcours l'image et renvoie le nombre de pixels au code RGB égaux"""
    w,h = image.size
    cnt=0
    for x in range(w):
        for y in range(h):
            colorcode = image.getpixel((x,y))
            if colorcode[0]==colorcode[1]==colorcode[2]:
                cnt+=1
    return cnt
               

prepare_image(imagecode,encode_message(MESSAGE))
imagecode.save("random_image.png")
print("Image générée avec succès.")
with Image.open("random_image.png") as im:
    im.rotate(0).show()
